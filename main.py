# main.py

# Importa a fun√ß√£o merge_sort do m√≥dulo ordenacao
from ordenacao import merge_sort
# Importa as fun√ß√µes de busca bin√°ria dos m√≥dulos busca
from busca import busca_binaria_nome, busca_binaria_nota

# Lista inicial de alunos (pode ser com dados)
alunos = []

def adicionar_aluno():
    # Solicita ao usu√°rio quantos alunos deseja adicionar
    quantidade = int(input("Quantos alunos voc√™ deseja adicionar? "))
    for i in range(quantidade): # Para cada aluno que o usu√°rio deseja adicionar
        print(f"\nCadastro do aluno {i + 1}:") # Exibe o n√∫mero do aluno que est√° sendo cadastrado
        # Solicita o nome do aluno, remove espa√ßos e coloca a primeira letra mai√∫scula
        nome = input("Digite o nome do aluno: ").strip().title()
        # Solicita a disciplina, remove espa√ßos e coloca a primeira letra mai√∫scula
        disciplina = input("Digite a disciplina: ").strip().title()
        # Solicita a nota do aluno e converte para float
        nota = float(input("Digite a nota do aluno (0.0 a 10.0): ")) 
        # Adiciona o aluno √† lista de alunos como um dicion√°rio
        alunos.append({'nome': nome, 'nota': nota, 'disciplina': disciplina}) # Adiciona o aluno como um dicion√°rio com nome, nota e disciplina
        print(f"‚úÖ Aluno {nome} adicionado com sucesso")
    

# Fun√ß√£o que exibe os alunos formatados
def exibir_alunos(lista):
    # Verifica se a lista est√° vazia
    if not lista: # se a lista de alunos estiver vazia exibe mensagem de erro
        print("‚ùå Nenhum aluno cadastrado.")
        return
    print("\nLista de Alunos:") 
    # Percorre e exibe cada aluno da lista
    for aluno in lista: # para cada aluno na lista de alunos
        print(f"Nome: {aluno['nome']}, Nota: {aluno['nota']}, Disciplina: {aluno['disciplina']}") # Exibe o nome, nota e disciplina do aluno
    print() 


# Fun√ß√£o para excluir aluno
def excluir_aluno():
    nome = input("Digite o nome do aluno que deseja excluir: ").strip().title() #Solicita o nome do aluno a ser exclu√≠do, remove espa√ßos e coloca a primeira letra mai√∫scula
    aluno_encontrado = busca_binaria_nome(alunos, nome) # Busca o aluno pelo nome usando busca_binaria_nome

    if aluno_encontrado: # Se o aluno for encontrado
        try: # Tenta remover o aluno da lista
            alunos.remove(aluno_encontrado)  # Remove o aluno da lista
            print(f"‚úÖ Aluno '{nome}' exclu√≠do com sucesso!")
        except ValueError: # Se ocorrer um erro ao remover o aluno
            print("‚ùå Erro ao excluir aluno.") 
    else:# Se o aluno n√£o for encontrado
        print("‚ùå Aluno n√£o encontrado.")


# Menu para escolher crit√©rio de ordena√ß√£o
def menu_ordenar():
    print("Como deseja ordenar os alunos?")
    print("1. Por nome")
    print("2. Por nota")
    # Solicita ao usu√°rio a op√ß√£o de ordena√ß√£o
    opcao = input("Escolha uma op√ß√£o (1 ou 2): ") # Pede ao usu√°rio escolher entre ordenar por nome ou por nota

    if opcao == '1': # se o usu√°rio escolher ordenar por nome
        merge_sort(alunos, chave='nome') # Ordena a lista de alunos pelo nome usando merge_sort
        print("‚úÖ Lista ordenada por nome.")
    elif opcao == '2': # se o usu√°rio escolher ordenar por nota
        merge_sort(alunos, chave='nota') # Ordena a lista de alunos pela nota usando merge_sort
        print("‚úÖ Lista ordenada por nota.")
    else:
        print("‚ùå Op√ß√£o inv√°lida!")

# Menu para escolher tipo de busca
def menu_buscar():
    print("\nComo deseja buscar?")
    print("1. Buscar aluno por nome")
    print("2. Buscar alunos por nota")
    # Solicita ao usu√°rio a op√ß√£o de busca
    opcao = input("Escolha uma op√ß√£o (1 ou 2): ") #pede ao usu√°rio escolher entre buscar por nome ou por nota

    if opcao == '1': # se o usu√°rio escolher buscar por nome
        # Solicita o nome do aluno a ser buscado
        nome = input("Digite o nome do aluno: ")
        # Busca o aluno pelo nome usando busca_binaria_nome
        resultado = busca_binaria_nome(alunos, nome) # Chama a fun√ß√£o de busca bin√°ria para encontrar o aluno com o nome informado
        if resultado: # Se encontrou o aluno, exibe os dados
            print("\n‚úÖ Aluno encontrado:")
            print(resultado) # Exibe o aluno encontrado
        else: # Caso n√£o encontre o aluno com o nome informado
            print("‚ùå Aluno n√£o encontrado.") 

    elif opcao == '2': # se o usu√°rio escolher buscar por nota
        try:
            # Solicita a nota a ser buscada e converte para float, se falhar, cai no except
            nota = float(input("Digite a nota que deseja buscar: "))
            # Busca alunos pela nota usando busca_binaria_nota
            resultado = busca_binaria_nota(alunos, nota) # Chama a fun√ß√£o de busca bin√°ria para encontrar alunos com a nota informada
            if resultado: # Se encontrou algum aluno com a nota, exibe a lista
                print(f"\n‚úÖ Alunos encontrados com nota {nota}:")
                exibir_alunos(resultado)
            else:  # Caso nenhum aluno seja encontrado com a nota informada
                print("‚ùå Nenhum aluno encontrado com essa nota.")
        except ValueError:
            # Caso o valor digitado n√£o seja um n√∫mero v√°lido
            print("‚ùå Digite uma nota v√°lida (ex: 8.5).")

    else:
        print("‚ùå Op√ß√£o inv√°lida!")


# Menu principal do sistema. Onde o usu√°rio pode escolher as op√ß√µes dispon√≠veis.
def menu_principal():
    while True:
        print("\nüìö Sistema de Gerenciamento de Notas Escolares")
        print("1. Adicionar alunos")
        print("2. Buscar alunos")
        print("3. Exibir todos os alunos")
        print("4. Ordenar aluno")
        print("5. Excluir aluno")
        print("6. Sair")
        # Solicita ao usu√°rio a op√ß√£o do menu principal
        opcao = input("Escolha uma op√ß√£o (1-6): ")

        if opcao == '1':
            # Chama a fun√ß√£o para adicionar alunos
            adicionar_aluno()

        elif opcao == '2':
            # Chama a fun√ß√£o para buscar alunos
            menu_buscar()

        elif opcao == '3':
            # Exibe todos os alunos cadastrados
            exibir_alunos(alunos)

        elif opcao == '4':
            # Chama o menu de ordena√ß√£o
            menu_ordenar()

        elif opcao == '5':
            # Chama a fun√ß√£o para excluir aluno
            excluir_aluno()

        elif opcao == '6':
            # Sai do sistema
            print("üëã Saindo do sistema. At√© mais!")
            break

        else:
            # Caso a op√ß√£o seja inv√°lida
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")

menu_principal()  # Chama a fun√ß√£o para iniciar o menu principal do sistema

